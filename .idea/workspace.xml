<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e9d76ea2-2d98-4d4d-9ec7-ba3fc24e1e3a" name="Changes" comment="6. 다대일 매핑&#10;&#10;다대일 매핑을 @JoinTable 어노테이션을 활용하면 된다. 그러나 이렇게 하면 딱 FK값들만 설정되기에 컬럼을 추가할 수 없다. 그래서 아예 테이블을 하나 만들어 다대일,일대다 관계로 푸는게 맞다">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/hellojpa/JpaMain.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/hellojpa/JpaMain.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="useMavenConfig" value="true" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectId" id="2jvAJEi9EJDnvmSChySNssUccNC" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "C:/Users/jongk/OneDrive/Desktop/김영한 로드맵/자바 ORM 표준 JPA 프로그래밍 - 기본편/ex1-hello-jpa-start",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="hellojpa" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="JpaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="hellojpa.JpaMain" />
      <module name="ex1-hello-jpa" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="hellojpa.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.JpaMain" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e9d76ea2-2d98-4d4d-9ec7-ba3fc24e1e3a" name="Changes" comment="" />
      <created>1722257103774</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1722257103774</updated>
      <workItem from="1722257105114" duration="1408000" />
      <workItem from="1722337294181" duration="6463000" />
      <workItem from="1722430525120" duration="94000" />
      <workItem from="1722430775175" duration="3189000" />
      <workItem from="1722514368547" duration="1976000" />
      <workItem from="1722688952919" duration="5120000" />
      <workItem from="1722695481513" duration="563000" />
      <workItem from="1722696320883" duration="222000" />
      <workItem from="1722696559311" duration="507000" />
      <workItem from="1722697434997" duration="14000" />
      <workItem from="1722864056865" duration="186000" />
      <workItem from="1723374104339" duration="2047000" />
      <workItem from="1723376539967" duration="81000" />
      <workItem from="1723461121659" duration="1079000" />
    </task>
    <task id="LOCAL-00001" summary="1. maven 프로젝트 생성&#10;&#10;스프링 없이 JPA만 순수하게 학습하기위해 먼저 maven 프로젝트를 생성하여 기본 설정을 세팅합니다. H2데이터베이스를 사용합니다. 추후에 스프링을 적용예정">
      <created>1722258401608</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1722258401608</updated>
    </task>
    <task id="LOCAL-00002" summary="2. JPA 실행 테스트 및 영속성 컨텍스트 동작 확인&#10;&#10;영속성 컨텍스트를 사용하게 될때의 주요 이점&#10;1차 캐시, 영속 엔티티의 동일성 보장, 쓰기지연, 변경감지 등을 예제를 통해 학습했다. main 에서 확인하며 지워서 코드가 남아있지 않지만, 노션 페이지의 영속성 컨텍스트 1,2페이지를 통해서 코드를 확인 할 수 있다.">
      <created>1722344493232</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1722344493232</updated>
    </task>
    <task id="LOCAL-00003" summary="2. JPA 실행 테스트 및 영속성 컨텍스트 동작 확인&#10;&#10;영속성 컨텍스트를 사용하게 될때의 주요 이점&#10;1차 캐시, 영속 엔티티의 동일성 보장, 쓰기지연, 변경감지 등을 예제를 통해 학습했다. main 에서 확인하며 지워서 코드가 남아있지 않지만, 노션 페이지의 영속성 컨텍스트 1,2페이지를 통해서 코드를 확인 할 수 있다.">
      <created>1722430815347</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1722430815347</updated>
    </task>
    <task id="LOCAL-00004" summary="3. 준영속 &#10;&#10;준영속상태는 영속 상태의 엔티티를 영속성 컨텍스트에서 분리하는 것으로 준영속 상태의 엔티티를 변경해도 반영되지 않는다. &#10;&#10;준영속 상태를 만드는 방법은&#10;em.detach(entity). em.clear(),em.close()가 있다.">
      <created>1722431752650</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1722431752650</updated>
    </task>
    <task id="LOCAL-00005" summary="4. 필드 매핑&#10;&#10;필드 매핑에 대한 예제, 노션링크에 자세한 코드 설명이 있습니다.">
      <created>1722689064435</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1722689064435</updated>
    </task>
    <task id="LOCAL-00006" summary="4. 키 매핑&#10;&#10;IDENTITY방식, TABLE방식, SEQUENCE방식, AUTO방식이 있다. &#10;IDENTITY방식은 DB 자체에서 키값을 설정하도록 일임하는것이기 때문에 INSERT하기전에는 키값을 알 수 없다. 그래서 JPA는 예외적으로 IDENTITY방식의 엔티티를 INSERT할 때 미리 INSERT문을 날린다.&#10;TABLE,SEQUENCE방식은 미리 allocationSize의 크기만큼 키값을 가져와 성능 최적화를 할 수 있다.">
      <created>1722693546054</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1722693546054</updated>
    </task>
    <task id="LOCAL-00007" summary="4. 키 매핑&#10;&#10;IDENTITY방식, TABLE방식, SEQUENCE방식, AUTO방식이 있다. &#10;IDENTITY방식은 DB 자체에서 키값을 설정하도록 일임하는것이기 때문에 INSERT하기전에는 키값을 알 수 없다. 그래서 JPA는 예외적으로 IDENTITY방식의 엔티티를 INSERT할 때 미리 INSERT문을 날린다.&#10;TABLE,SEQUENCE방식은 미리 allocationSize의 크기만큼 키값을 가져와 성능 최적화를 할 수 있다.">
      <created>1722695874055</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1722695874055</updated>
    </task>
    <task id="LOCAL-00008" summary="5. 일대일 매핑&#10;&#10;일대일 매핑을 할 때 주테이블이 연관관계의 주인이 되는경우와 대상 테이블이 되는 경우 두가지를 살펴본다.">
      <created>1723375300713</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1723375300713</updated>
    </task>
    <task id="LOCAL-00009" summary="6. 다대일 매핑&#10;&#10;다대일 매핑을 @JoinTable 어노테이션을 활용하면 된다. 그러나 이렇게 하면 딱 FK값들만 설정되기에 컬럼을 추가할 수 없다. 그래서 아예 테이블을 하나 만들어 다대일,일대다 관계로 푸는게 맞다">
      <created>1723376593497</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1723376593497</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="1. maven 프로젝트 생성&#10;&#10;스프링 없이 JPA만 순수하게 학습하기위해 먼저 maven 프로젝트를 생성하여 기본 설정을 세팅합니다. H2데이터베이스를 사용합니다. 추후에 스프링을 적용예정" />
    <MESSAGE value="2. JPA 실행 테스트 및 영속성 컨텍스트 동작 확인&#10;&#10;영속성 컨텍스트를 사용하게 될때의 주요 이점&#10;1차 캐시, 영속 엔티티의 동일성 보장, 쓰기지연, 변경감지 등을 예제를 통해 학습했다. main 에서 확인하며 지워서 코드가 남아있지 않지만, 노션 페이지의 영속성 컨텍스트 1,2페이지를 통해서 코드를 확인 할 수 있다." />
    <MESSAGE value="3. 준영속 &#10;&#10;준영속상태는 영속 상태의 엔티티를 영속성 컨텍스트에서 분리하는 것으로 준영속 상태의 엔티티를 변경해도 반영되지 않는다. &#10;&#10;준영속 상태를 만드는 방법은&#10;em.detach(entity). em.clear(),em.close()가 있다." />
    <MESSAGE value="4. 필드 매핑&#10;&#10;필드 매핑에 대한 예제, 노션링크에 자세한 코드 설명이 있습니다." />
    <MESSAGE value="4. 키 매핑&#10;&#10;IDENTITY방식, TABLE방식, SEQUENCE방식, AUTO방식이 있다. &#10;IDENTITY방식은 DB 자체에서 키값을 설정하도록 일임하는것이기 때문에 INSERT하기전에는 키값을 알 수 없다. 그래서 JPA는 예외적으로 IDENTITY방식의 엔티티를 INSERT할 때 미리 INSERT문을 날린다.&#10;TABLE,SEQUENCE방식은 미리 allocationSize의 크기만큼 키값을 가져와 성능 최적화를 할 수 있다." />
    <MESSAGE value="5. 일대일 매핑&#10;&#10;일대일 매핑을 할 때 주테이블이 연관관계의 주인이 되는경우와 대상 테이블이 되는 경우 두가지를 살펴본다." />
    <MESSAGE value="6. 다대일 매핑&#10;&#10;다대일 매핑을 @JoinTable 어노테이션을 활용하면 된다. 그러나 이렇게 하면 딱 FK값들만 설정되기에 컬럼을 추가할 수 없다. 그래서 아예 테이블을 하나 만들어 다대일,일대다 관계로 푸는게 맞다" />
    <option name="LAST_COMMIT_MESSAGE" value="6. 다대일 매핑&#10;&#10;다대일 매핑을 @JoinTable 어노테이션을 활용하면 된다. 그러나 이렇게 하면 딱 FK값들만 설정되기에 컬럼을 추가할 수 없다. 그래서 아예 테이블을 하나 만들어 다대일,일대다 관계로 푸는게 맞다" />
  </component>
</project>